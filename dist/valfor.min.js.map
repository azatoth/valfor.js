{"version":3,"sources":["valfor.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","valfor","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"cellphonenum","number","format","replace","prefix","p","indexOf","substring","NATIONAL_FORMAT","fn","pdx","substr","INTERNATIONAL_FORMAT","personalidnum","type","TYPE_PERSONAL_NUMBER","TYPE_COORDINATION_NUMBER","nums","year","Date","getFullYear","y","parseInt","onum","ctrl","mdim",2,3,4,5,6,7,8,9,10,11,12,"lnum","join","cnum","ADD_SEPARATOR","NBR_DIGITS_12","NBR_DIGITS_10","is_luhn_valid","luhn_checksum","nbr","val","lookup","len","bit","sum","charAt","calculate_luhn","orgidnum","bankcardnum","nsep","SPACE_SEPARATOR","DASH_SEPARATOR","zipcode","pfx","pn","testEmail","email","test","lastIndexOf","UPPERCASE","toUpperCase","LOWERCASE","toLowerCase","testText","text","min","max","lenght","ascii","c","charCodeAt","match","j","DEFAULT","NUMERICAL_FORMAT"],"mappings":"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","file":"valfor.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.valfor = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar DEFAULT = 0x0000,\n  NUMERICAL_FORMAT = 0x0001,\n  INTERNATIONAL_FORMAT = 0x0002,\n  NATIONAL_FORMAT = 0x0004,\n  NBR_DIGITS_10 = 0x0008,\n  NBR_DIGITS_12 = 0x0010,\n  ADD_SEPARATOR = 0x0020,\n  SPACE_SEPARATOR = 0x0040,\n  DASH_SEPARATOR = 0x0080,\n  LOWERCASE = 0x0100,\n  UPPERCASE = 0x0200,\n  TYPE_PERSONAL_NUMBER = 0x0400,\n  TYPE_COORDINATION_NUMBER = 0x0800;\n\n/**\n * Kontrollerar om ett svenskt mobiltelefonnummer är giltigt i enlighet med\n * Post- & Telestyrelsens nummerplan för mobiltelefonitjänster.\n *\n * För att retunera mobiltelefonnumret i ett visst format, kan en andra\n * valfri parameter anges. De format som stöds är:\n *\n *     NUMERICAL_FORMAT = Numeriskt format (standard), NNNNNNNNNN\n *     INTERNATIONAL_FORMAT = Internationellt format E.164, +46NNNNNNNNN\n *     NATIONAL_FORMAT = Nationellt format, NNN-NNN NN NN\n *\n * @param {String} number Mobiltelefonnummer\n * @param {Int} format Önskat format (1-3)\n * @returns {String|Boolean} Mobiltelefonnummer eller 'false'\n */\nfunction cellphonenum(number, format) {\n  var n = number.replace(/\\D/g, ''),\n    prefix = [70, 72, 73, 76, 79];\n  for (var p in prefix) {\n    if (n.indexOf(prefix[p]) > -1 && n.substring(n.indexOf(prefix[p]), n.length)\n      .length === 9) {\n      if (format & NATIONAL_FORMAT) {\n        var fn = '0',\n          pdx = n.indexOf(prefix[p]);\n        for (var i = pdx; i <= pdx + 8; i++) {\n          fn += (i === pdx + 2 ? '-' : (i === pdx + 5 || i === pdx + 7 ? ' ' : '')) + n.substr(i, 1);\n        }\n        return fn;\n      }\n      return (format & INTERNATIONAL_FORMAT ? '+46' : '0') + n.substring(n.indexOf(prefix[p]), n.length);\n    }\n  }\n  return false;\n}\n\n/**\n * Kontrollerar om ett svenskt person- eller samordningsnummer är giltigt\n * i enlighet med Folkbokföringslagen 1991:481 (18§), SKV 704 och SKV 707.\n *\n * För att retunera person- eller samordningsnumret i ett visst format,\n * kan en andra valfri parameter anges. De format som stöds är:\n *\n *     ADD_SEPARATOR - Lägg till skiljetecken (-)\n *     NBR_DIGITS_12 = 12 siffror (standard), ÅÅÅÅMMDDNNNN\n *     NBR_DIGITS_10 = 10 siffror, ÅÅMMDDNNNN\n *\n * Typ kan vara följande:\n *     TYPE_PERSONAL_NUMBER - vanligt personnummer\n *     TYPE_COORDINATION_NUMBER - samordningnummer\n *\n * @param {String} number Person- eller samordningnummer\n * @param {Int} format Önskat format, (ADD_SEPARATOR | (NBR_DIGITS_12,NBR_DIGITS_10))\n * @param {Int} [type=TYPE_PERSONAL_NUMBER|TYPE_COORDINATION_NUMBER]\n * @returns {String|Boolean} Person-/samordningnummer eller 'false'\n */\nfunction personalidnum(number, format, type) {\n  type = typeof type !== 'undefined' ? type : TYPE_PERSONAL_NUMBER | TYPE_COORDINATION_NUMBER;\n  var n = number.replace(/\\D/g, '');\n  if (!(n.length === 12 || n.length === 10)) {\n    return false;\n  }\n\n  var nums = [\n      n.substr(0, (n.length === 10 ? 2 : 4)), // year\n      n.substr(-8, 2), // month\n      n.substr(-6, 2), // day\n      n.substr(-4, 3), // number\n      n.substr(-1, 1) // control number\n    ],\n    year = new Date()\n    .getFullYear();\n  if (nums[0].length === 2) {\n    var y = year.toString();\n    if (number.substr(-5, 1) === '+') {\n      nums[0] = parseInt(y.substr(0, 2), 10) - (parseInt(y.substr(-2), 10) >= parseInt(nums[0], 10) ? 1 : 2) + nums[0];\n    } else {\n      nums[0] = (parseInt(y.substr(-2), 10) < parseInt(nums[0], 10) ? parseInt(y.substr(0, 2), 10) - 1 + nums[0] : y.substr(0, 2) + nums[0]);\n    }\n  }\n  var ctrl = [parseInt(nums[0], 10), parseInt(nums[1], 10), parseInt(nums[2], 10)],\n    mdim = {\n      1: 31,\n      2: 29,\n      3: 31,\n      4: 30,\n      5: 31,\n      6: 30,\n      7: 31,\n      8: 31,\n      9: 30,\n      10: 31,\n      11: 30,\n      12: 31\n    },\n    lnum = nums.join('')\n    .substr(2),\n    cnum = nums.join(''),\n    onum;\n  if (~type & TYPE_PERSONAL_NUMBER && ctrl[2] <= 31) {\n    return false;\n  }\n  if (~type & TYPE_COORDINATION_NUMBER && ctrl[2] >= 60) {\n    return false;\n  }\n\n  if (ctrl[0] > year || ctrl[1] < 1 || ctrl[1] > 12 || !!(ctrl[2] < 1 || ctrl[2] > mdim[ctrl[1]]) && (ctrl[2] < 61 || ctrl[2] > mdim[ctrl[1]] + 60)) {\n    return false;\n  }\n\n  if (format & ADD_SEPARATOR) {\n    onum = (format & NBR_DIGITS_12 ? cnum.substr(0, 8) : cnum.substr(2, 6)) + (year - ctrl[0] >= 100 ? '+' : '-') + cnum.substr(-4);\n  } else {\n    onum = (format & NBR_DIGITS_10 ? cnum.substr(2) : cnum);\n  }\n\n  return is_luhn_valid(lnum) && onum;\n}\n\nfunction luhn_checksum(nbr) {\n  var\n    lookup = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9],\n    len = nbr.length,\n    bit = 1,\n    sum = 0,\n    val;\n\n  while (len) {\n    val = parseInt(nbr.charAt(--len), 10);\n    sum += (bit ^= 1) ? lookup[val] : val;\n  }\n\n  return sum % 10;\n}\n\nfunction is_luhn_valid(nbr) {\n  return luhn_checksum(nbr) === 0;\n}\n\nfunction calculate_luhn(nbr) {\n  var sum = luhn_checksum(nbr + '0');\n  return sum === 0 ? 0 : 10 - sum;\n}\n\n/**\n * Kontrollerar om ett svenskt organisationsnummer är giltigt i enlighet med\n * Lagen om identitetsbeteckning för juridiska personer (1974:174) och SKV 709.\n *\n * För att retunera organisationsnumret i ett visst format, kan en andra\n * valfri parameter anges. De format som stöds är:\n *\n *     ADD_SEPARATOR = Lägg till siljetecken (-)\n *     NBR_DIGITS_12 = 12 siffror, ÅÅÅÅMMDDNNNN\n *     NBR_DIGITS_10 = 10 siffror (standard), ÅÅMMDDNNNN\n *\n * @param {String} number Organisationsnumret som ska kontrolleras\n * @param {Int} format (ADD_SEPARATOR| (NBR_DIGITS_10,NBR_DIGITS_12))\n * @returns {String|Boolean} Returnerar personnumret eller 'false'\n */\nfunction orgidnum(number, format) {\n    var n = number.replace(/\\D/g, '');\n\n    // 16NNNNNNNNNN används för lagring inom skatteverket\n    if (n.length === 12 && parseInt(n.substr(0, 1)) !== 16) {\n      if (parseInt(n.substr(0, 1)) !== 16) {\n        return false;\n      }\n      n = n.substr(2);\n    }\n\n    if (n.length !== 10 || parseInt(n.substr(2, 1)) < 2) {\n      return false;\n    }\n\n    return is_luhn_valid(n) && (format & NBR_DIGITS_12 ? '16' : '') + (format & ADD_SEPARATOR ? n.substr(0, 6) + '-' + n.substr(-4) : n);\n  }\n  /**\n   * Kontrollerar om ett bankkortsnummer är giltigt i enlighet med ISO/IEC\n   * 7812-1:2015.\n   *\n   * För att retunera bankkortsnumret i ett visst format, kan en andra valfri\n   * parameter anges. De format som stöds är:\n   *\n   *     DEFAULT = Bankkortsnummer utan skiljetecken (standard), NNNNNNNNNNNNNNNN\n   *     SPACE_SEPARATOR = Bankkortsnummer med ' ' som skiljetecken, NNNN NNNN NNNN NNNN\n   *     DASH_SEPARATOR = Bankkortsnummer med '-' som skiljetecken, NNNN-NNNN-NNNN-NNNN\n   *\n   * @param {String} number Bankkortsnummer\n   * @param {Int} format Önskat format (DEFAULT,SPACE_SEPARATOR,DASH_SEPARATOR)\n   * @returns {String|Boolean} Bankkortsnumert eller 'false'\n   */\n\nfunction bankcardnum(number, format) {\n  var n = number.replace(/\\D/g, ''),\n    nsep, onum = '';\n  if (n.length < 11 || n.length > 21) {\n    return false;\n  }\n\n  if (format & SPACE_SEPARATOR || format & DASH_SEPARATOR) {\n    nsep = (format & SPACE_SEPARATOR ? ' ' : '-');\n    while (n.length > 0) {\n      onum += n.substr(0, 4) + nsep;\n      n = n.substr(4);\n    }\n    onum = onum.substring(0, onum.length - 1);\n  } else {\n    onum = n;\n  }\n  return is_luhn_valid(n) && onum;\n}\n\n/**\n * Kontrollerar om ett svenskt postnummer är giltigt i enlighet med\n * Svenska Postnummersystemet och SS 613401:2011.\n *\n * För att retunera postnumret i ett visst format, kan en andra valfri\n * parameter anges. De format som stöds är:\n *\n *     NUMERICAL_FORMAT = Numeriskt format (standard), NNNNN\n *     NATIONAL_FORMAT = Nationellt format, NNN NN\n *     INTERNATIONAL_FORMAT = Internationellt format, SE-NNN NN\n *\n * @param {String} number Postnummer\n * @param {Int} format Önskat format (NUMERICAL_FORMAT,NATIONAL_FORMAT,INTERNATIONAL_FORMAT)\n * @returns {String|Boolean} Postnumret eller 'false'\n */\nfunction zipcode(number, format) {\n    var n = number.replace(/\\D/g, ''),\n      pfx = ['32', '48', '49', '99'],\n      pn = parseInt(n, 10);\n    if (n.length !== 5 || pn < 10000 || pn > 99000 || pfx.indexOf(n.substr(0, 2)) > -1) {\n      return false;\n    }\n    return (format & NATIONAL_FORMAT ? n.substr(0, 3) + ' ' + n.substr(-2) : (format & INTERNATIONAL_FORMAT ? 'SE-' + n.substr(0, 3) + ' ' + n.substr(-2) : n));\n  }\n  /**\n   * Kontrollerar om en e-postadress är giltig enligt mönstret *@*.*. Maximal\n   * tillåten längd på en e-postadress är 254 tecken, i enlighet med RFC 3696.\n   *\n   * För att retunera e-postadressen i ett visst format, kan en andra valfri\n   * parameter anges. De format som stöds är:\n   *\n   *     DEFAULT = Oförändrad, samma som inmatad e-postadress (standard)\n   *     UPPERCASE = VERSAL E-POSTADRESS\n   *     LOWERCASE = gemen e-postadress\n   *\n   * @param {String} email E-postadress\n   * @param {Int} format Önskat format (DEFAULT,UPPERCASE,LOWERCASE)\n   * @returns {String|Boolean} E-postadress eller 'false'\n   */\n\nfunction testEmail(email, format) {\n    var e = !!(/\\S+@\\S+\\.\\S+/.test(email) && email.indexOf('@') === email.lastIndexOf('@') && email.length < 255);\n    email = (format & UPPERCASE ? email.toUpperCase() : (format & LOWERCASE ? email.toLowerCase() : email))\n      .replace(/^\\s+|\\s+$/gm, '');\n    return (e ? email : false);\n  }\n  /**\n   * Kontrollerar\n   *\n   * Format:\n   *\n   *     DEFAULT = Oförändrad, samma som inmatad text (standard)\n   *     UPPERCASE = VERSAL TEXT\n   *     LOWERCASE = gemen text\n   *\n   * Typer:\n   *\n   *     VARCHAR - Alla tecken tillåts (standard)\n   *     LETTER - Latinska bokstäver enligt ISO 8859-1\n   *     LETTEREXT - Latinska bokstäver enligt ISO 8859-1 samt \"&_-,.() \"\n   *     NUMBER - Numeriska tecken, 0-9\n   *     NUMBEREXT - Numeriska tecken, 0-9 samt \"%‰$£€¥+-,.() \"\n   *     ALPHANUM - Alfanumeriska tecken, aA-zZ, 0-9 samt '_'\n   *\n   * @param {String} text Textsträng\n   * @param {String} type Valideringstyp\n   * @param {Int} format Önskat format (DEFAULT,UPPERCASE,LOWERCASE)\n   * @param {Int} min Minimal tillåten längd\n   * @param {Int} max Maximal tillåten längd\n   * @returns {String|Boolean} Returnerar textsträng eller 'false'\n   */\n\nfunction testText(text, type, format, min, max) {\n  type = type.toUpperCase(), min = (min > 0 ? min : 0), max = (max > 0 ? max : text.length);\n  if (text.length < min || text.lenght > max) {\n    return false;\n  }\n  if (type === 'LETTER' || type === 'LETTEREXT') {\n    var ascii = [\n      [\n        [65, 90],\n        [97, 122],\n        [192, 214],\n        [216, 246],\n        [248, 255]\n      ],\n      [131, 138, 140, 142, 154, 156, 158, 159],\n      [32, 38, 40, 41, 44, 45, 46, 95]\n    ];\n    for (var i = 0; i < text.length; i++) {\n      var c = text.charAt(i)\n        .charCodeAt(),\n        match = false;\n      for (var j in ascii[0]) {\n        if ((c >= ascii[0][j][0] && c <= ascii[0][j][1]) || ascii[1].indexOf(c) > -1) {\n          match = true;\n          break;\n        }\n      }\n      if (!match && type === 'LETTEREXT' && ascii[2].indexOf(c) === -1) {\n        return false;\n      } else if (!match && type !== 'LETTEREXT') {\n        return false;\n      }\n    }\n  } else if (type === 'NUMBER' && /[^0-9]/i.test(text)) {\n    return false;\n  } else if (type === 'NUMBEREXT' && /[^0-9%‰$£€¥+\\-,\\.() ]/i.test(text)) {\n    return false;\n  } else if (type === 'ALPHANUM' && /[^\\w]/i.test(text)) {\n    return false;\n  }\n  return (text.length === 0 ? true : (format & LOWERCASE ? text.toLowerCase() : (format & UPPERCASE ? text.toUpperCase() : text)));\n}\n\nmodule.exports = {\n  cellphonenum: cellphonenum,\n  personalidnum: personalidnum,\n  calculate_luhn: calculate_luhn,\n  orgidnum: orgidnum,\n  bankcardnum: bankcardnum,\n  zipcode: zipcode,\n  email: testEmail,\n  text: testText,\n  DEFAULT: DEFAULT,\n  NUMERICAL_FORMAT: NUMERICAL_FORMAT,\n  INTERNATIONAL_FORMAT: INTERNATIONAL_FORMAT,\n  NATIONAL_FORMAT: NATIONAL_FORMAT,\n  NBR_DIGITS_10: NBR_DIGITS_10,\n  NBR_DIGITS_12: NBR_DIGITS_12,\n  ADD_SEPARATOR: ADD_SEPARATOR,\n  SPACE_SEPARATOR: SPACE_SEPARATOR,\n  DASH_SEPARATOR: DASH_SEPARATOR,\n  LOWERCASE: LOWERCASE,\n  UPPERCASE: UPPERCASE,\n  TYPE_PERSONAL_NUMBER: TYPE_PERSONAL_NUMBER,\n  TYPE_COORDINATION_NUMBER: TYPE_COORDINATION_NUMBER\n};\n\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}